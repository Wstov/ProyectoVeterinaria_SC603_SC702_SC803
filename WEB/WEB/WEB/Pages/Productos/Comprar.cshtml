@page
@model WEB.Pages.Productos.ComprarModel
@{
}
@{
    Guid idUsuario = Guid.Empty;
    if (User.Identity.IsAuthenticated)
    {
        idUsuario = Abstracciones.Modelos.Autenticacion.ClaimsPrincipalExtensions.GetIdUsuario(User);
    }
}
<script src="https://www.paypal.com/sdk/js?client-id=AYxc_eVSJMaNCyt4Shwgs_LXLz5I0gGe6W9LW0BES4RYmi1-Sj5yTMeuQ9ocDW7P-qnzKnRzQZ2VZMSU&currency=USD"></script>
<h1>Finaliza tu compra</h1>
<br />
<h2 style="text-align:center">Desglose de la compra</h2>
<div id="desgloseCompraContainer" class="container">
    <p>Cargando el desglose de tu compra...</p>
</div>
<hr />

<h2 style="text-align:center">Datos del Perfil del Comprador</h2>
<div class="container">
    <form method="post">
        <input type="hidden" asp-for="@Model.persona.Id" />
        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label"><b>Nombre</b></label>
            <input readonly asp-for="persona.Nombre" type="text" class="form-control" id="exampleFormControlInput1">
            <span asp-validation-for="persona.Nombre" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label"><b>Apellidos</b></label>
            <input readonly asp-for="persona.Apellido" type="text" class="form-control" id="exampleFormControlInput1">
            <span asp-validation-for="persona.Apellido" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label for="exampleFormControlTextarea1" class="form-label"><b>Dirección de Envio</b></label>
            <textarea readonly asp-for="persona.Direccion" class="form-control" id="exampleFormControlTextarea1" rows="3"></textarea>
            <span asp-validation-for="persona.Direccion" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label"><b>Teléfono</b></label>
            <input readonly asp-for="persona.Telefono" type="text" class="form-control" id="exampleFormControlInput1">
            <span asp-validation-for="persona.Telefono" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label"><b>Correo electrónico</b></label>
            <input readonly asp-for="persona.Correo" type="email" class="form-control" id="exampleFormControlInput1">
            <span asp-validation-for="persona.Correo" class="text-danger"></span>
        </div>
        <!-- Botón para abrir el modal -->
        <button type="button" class="btn btn-success w-100" data-bs-toggle="modal" data-bs-target="#editModal">Editar Datos</button>
        <div asp-validation-summary="All" class="text-danger"></div>
    </form>
</div>

<!-- Modal para editar los datos -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <!-- Clase para centrar el modal verticalmente -->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Editar Perfil</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post">
                    <input type="hidden" asp-for="@Model.persona.Id" />
                    <div class="mb-3">
                        <label for="editNombre" class="form-label"><b>Nombre</b></label>
                        <input asp-for="persona.Nombre" type="text" class="form-control" id="editNombre">
                        <span asp-validation-for="persona.Nombre" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label for="editApellido" class="form-label"><b>Apellidos</b></label>
                        <input asp-for="persona.Apellido" type="text" class="form-control" id="editApellido">
                        <span asp-validation-for="persona.Apellido" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label for="editDireccion" class="form-label">Dirección</label>
                        <textarea asp-for="persona.Direccion" class="form-control" id="editDireccion" rows="3"></textarea>
                        <span asp-validation-for="persona.Direccion" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label for="editTelefono" class="form-label"><b>Teléfono</b></label>
                        <input asp-for="persona.Telefono" type="text" class="form-control" id="editTelefono">
                        <span asp-validation-for="persona.Telefono" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label for="editCorreo" class="form-label"><b>Correo electrónico</b></label>
                        <input asp-for="persona.Correo" type="email" class="form-control" id="editCorreo">
                        <span asp-validation-for="persona.Correo" class="text-danger"></span>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">Cancelar</button>
                        <input type="submit" value="Guardar cambios" class="btn btn-primary w-100" />
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<hr />
<h2 style="text-align:center">Método de Pago</h2>
<div class="container">
    <div class="mb-3">
        <label for="metodoPago" class="form-label"><b>Selecciona un método de pago</b></label>
        <select id="metodoPago" class="form-select">
            <option value="Tarjeta">Tarjeta</option>
            <option value="Sinpe Movil">Sinpe Móvil</option>
            <option value="Efectivo">Efectivo (Apartar y recoger en el local)</option>
        </select>
        <br/>
        <label for="comentario" class="form-label"><b>Agrega un comentario extra del pedido (Opcional)</b></label>
        <input type="text" class="input-group" name="comentario" id="comentario" value="" />
        <span id="metodoPagoError" class="text-danger"></span>
    </div>
</div>
<div class="container">
    <button id="btnComprar" class="btn btn-primary w-100">Comprar</button>
</div>


<script>
    document.addEventListener('DOMContentLoaded', async function () {
        const personaId = '@idUsuario';
        const urlDetalles = `https://localhost:7184/api/Carrito/${personaId}/detalles`;

        try {
            const response = await fetch(urlDetalles);
            if (response.ok) {
                const detalles = await response.json();
                mostrarDesgloseCompra(detalles);
            } else {
                console.error('Error al obtener los detalles del carrito');
                document.getElementById('desgloseCompraContainer').innerHTML = '<p>No se pudo cargar el desglose de la compra.</p>';
            }
        } catch (error) {
            console.error('Error en la solicitud:', error);
            document.getElementById('desgloseCompraContainer').innerHTML = '<p>No se pudo conectar al servidor.</p>';
        }
    });

    async function mostrarDesgloseCompra(detalles) {
        const desgloseContainer = document.getElementById('desgloseCompraContainer');
        desgloseContainer.innerHTML = '';

        if (detalles.length === 0) {
            desgloseContainer.innerHTML = '<p>El carrito está vacío.</p>';
            return;
        }

        let total = 0;
        let desgloseHtml = `
    <table class="table">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio Unitario</th>
                <th>Subtotal</th>
            </tr>
        </thead>
        <tbody>
            `;

        for (const detalle of detalles) {
            const productoNombre = await obtenerNombreProducto(detalle.productoID);
            const subtotal = detalle.cantidad * detalle.precioUnitario;
            total += subtotal;

            desgloseHtml += `
            <tr>
                <td>${productoNombre}</td>
                <td>${detalle.cantidad}</td>
                <td>₡${detalle.precioUnitario.toFixed(2)}</td>
                <td>₡${subtotal.toFixed(2)}</td>
            </tr>
            `;
        }

        desgloseHtml += `
        </tbody>
        <tfoot>
            <tr>
                <th colspan="3" style="text-align:right">Total:</th>
                <th>₡${total.toFixed(2)}</th>
            </tr>
        </tfoot>
    </table>
        `;

        desgloseContainer.innerHTML = desgloseHtml;
    }

    async function obtenerNombreProducto(productoID) {
        const urlProducto = `https://localhost:7184/api/Producto?ProductoID=${productoID}`;
        try {
            const response = await fetch(urlProducto);
            if (response.ok) {
                const producto = await response.json();
                return producto.nombre;
            } else {
                console.error(`Error al obtener el nombre del producto con ID: ${productoID}`);
                return 'Nombre no disponible';
            }
        } catch (error) {
            console.error('Error en la solicitud:', error);
            return 'Nombre no disponible';
        }
    }
</script>
<script>
    document.getElementById('btnComprar').addEventListener('click', async function () {
        const idUsuario = '@idUsuario'; 
        const carritoActivo = await obtenerCarritoActivo(idUsuario);
        const metodoPago = document.getElementById('metodoPago').value;
        const comentario = document.getElementById('comentario').value;
        const total = await calcularTotalCompra();

        if (!idUsuario || !metodoPago || total <= 0) {
            alert('Por favor, selecciona un carrito, un método de pago y asegúrate de que el total sea válido.');
            return;
        }

        if (!carritoActivo) {
            alert('No se encontró un carrito activo.');
            return;
        }

        const idCarrito = carritoActivo.carritoID;
        const factura = {
            IdPersona: idUsuario,
            IdCarrito: idCarrito,
            MetodoPago: metodoPago,
            Total: total,
            Comentarios: comentario || '',
        };

        const tasaDeCambio = await obtenerTasaDeCambio();
        if (!tasaDeCambio) {
            alert('No se pudo obtener la tasa de cambio actual.');
            return;
        }

        const totalEnDolares = total * tasaDeCambio;
        if (isNaN(totalEnDolares) || totalEnDolares <= 0) {
            alert('El total convertido a dólares no es válido.');
            return;
        }

        factura.TotalDolares = totalEnDolares.toFixed(2); 
        console.log(`Total en dólares: ${factura.TotalDolares}`);

        if (metodoPago === "Tarjeta") {
            paypal.Buttons({
                createOrder: function (data, actions) {
                    return actions.order.create({
                        purchase_units: [{
                            amount: {
                                value: totalEnDolares.toFixed(2), 
                            },
                            description: `Pago de carrito ${idCarrito}`
                        }]
                    });
                },
                onApprove: async function (data, actions) {
                    return actions.order.capture().then(async function (details) {
                        console.log('Transacción exitosa:', details);
                        factura.TransactionId = details.id; 
                        factura.MetodoPago = "PayPal-Tarjeta";

                        await registrarFactura(factura, idCarrito);
                    });
                },
                onError: function (err) {
                    console.error('Error en el pago de PayPal:', err);
                    alert('Hubo un error al procesar el pago con PayPal. Revisa la consola para más detalles.');
                }
            }).render('#paypal-container');
        } else {
            await registrarFactura(factura, idCarrito);
        }
    });

    async function obtenerTasaDeCambio() {
        try {
            const response = await fetch('https://v6.exchangerate-api.com/v6/aaa83a4cfa81cdcb8fec4ee7/latest/CRC'); 
            const data = await response.json();

            if (data.result === 'success') {
                return data.conversion_rates.USD; 
            } else {
                console.error('Error al obtener la tasa de cambio:', data.error);
                return null;
            }
        } catch (error) {
            console.error('Error en la solicitud de tasa de cambio:', error);
            return null;
        }
    }

    async function registrarFactura(factura, idCarrito) {
        try {
            const response = await fetch('https://localhost:7184/api/Factura', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(factura),
            });

            if (response.ok) {
                const data = await response.json();
                Swal.fire({
                    title: 'Compra realizada con éxito',
                    text: 'Tu compra ha sido procesada correctamente.',
                    icon: 'success',
                    confirmButtonText: 'Aceptar'
                }).then(async () => {
                    const finalizarResponse = await fetch(`https://localhost:7184/api/Carrito/${idCarrito}/finalizar`, {
                        method: 'PUT',
                    });

                    if (finalizarResponse.ok) {
                        window.location.href = '/Index';
                    } else {
                        Swal.fire('Error', 'Hubo un error al finalizar el carrito.', 'error');
                    }
                });
            } else {
                Swal.fire('Error', 'Hubo un error al realizar la compra. Intenta nuevamente.', 'error');
            }

        } catch (error) {
            console.error('Error al hacer la solicitud:', error);
            alert('Error al procesar la compra.');
        }
    }

    async function calcularTotalCompra() {
        const desgloseContainer = document.getElementById('desgloseCompraContainer');
        const rows = desgloseContainer.querySelectorAll('tbody tr');
        let total = 0;

        rows.forEach(row => {
            const subtotal = parseFloat(row.querySelector('td:last-child').textContent.replace('₡', '').trim());
            total += subtotal;
        });

        return total;
    }

    async function obtenerCarritoActivo(idUsuario) {
        try {
            const response = await fetch(`https://localhost:7184/api/Carrito/activo/${idUsuario}`);
            if (response.ok) {
                const data = await response.json();
                if (data.carritoID) {
                    return data;
                }
            }
            return null;
        } catch (error) {
            console.error('Error al obtener el carrito activo:', error);
            alert('Error al obtener el carrito activo.');
            return null;
        }
    }
</script>

<br></br>
<div id="paypal-container" style="justify-content:center; align-items:center"></div>

@section Scripts {
    @Html.RenderPartialAsync("_ValidationScriptsPartial")
}

@page
@model WEB.Pages.Productos.IndexModel
@{
}
@{
    Guid idUsuario = Guid.Empty;
    if (User.Identity.IsAuthenticated)
    {
        idUsuario = Abstracciones.Modelos.Autenticacion.ClaimsPrincipalExtensions.GetIdUsuario(User);
    }
}

<section class="mt-5">
    <div class="container">
        <h2 class="text-center mb-4">Nuestros Productos</h2>
        <div class="row mb-4">
            <div class="col-md-12">
                <form class="d-flex" role="search" method="get">
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" name="searchTerm" placeholder="Buscar productos" aria-label="Buscar productos" aria-describedby="button-addon2" value="@Request.Query["searchTerm"]">
                        <button class="btn btn-primary me-2" type="submit" id="button-addon2">Buscar</button>
                        <a href="/Productos/Index" class="btn btn-secondary">Limpiar</a>
                    </div>
                </form>
            </div>
        </div>
        <div class="row">
            @if (Model.producto != null)
            {
                @foreach (var producto in Model.producto)
                {
                    <div class="col-md-3 mb-4">
                        <div class="card shadow-sm h-100 d-flex flex-column">
                            <img src="data:image/png;base64,@producto.ImagenConvertida" class="card-img-top" alt="@producto.Nombre">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@Html.DisplayFor(modelItem => producto.Nombre)</h5>
                                <p class="card-text"><strong>Precio: </strong>@Html.DisplayFor(modelItem => producto.Precio)</p>
                                <p class="card-text"><strong>SKU: </strong>@Html.DisplayFor(modelItem => producto.ProductoID)</p>
                                <div class="d-grid gap-2 mt-auto">
                                    <button class="btn btn-primary" onclick="openProductModal('@producto.ImagenConvertida', '@producto.Nombre', '@producto.Precio', '@producto.Categoria', '@producto.Presentacion', '@producto.Cantidad', '@producto.Descripcion', '@producto.ProductoID')">
                                        Ver detalles
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-danger" role="alert">
                    No hay productos para mostrar.
                </div>
            }

            <!-- Modal de detalles del producto -->
            <div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="productModalLabel">Detalles del producto</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <img id="modalImage" class="img-fluid mb-3" alt="Imagen del producto">
                            <h5 style="text-align: center;" id="modalNombre"></h5>
                            <p><strong>Precio: </strong><span id="modalPrecio"></span></p>
                            <p><strong>Categoría: </strong><span id="modalCategoria"></span></p>
                            <p><strong>Presentación: </strong><span id="modalPresentacion"></span></p>
                            <p><strong>Cantidad disponible: </strong><span id="modalCantidad"></span></p>
                            <p><strong>Descripción: </strong><span id="modalDescripcion"></span></p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                            <!-- Botón de Agregar al carrito con el ID correcto -->
                            <button class="btn btn-primary" id="addToCartButton" onclick="agregarAlCarrito()">Agregar al carrito</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<div><a href="../Index" class="btn btn-secondary w-100" style="margin-top:10px">Volver</a></div>

<!-- Toast de confirmación -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Notificación</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            Mensaje de confirmación
        </div>
    </div>
</div>

<script>
    function openProductModal(imagen, nombre, precio, categoria, presentacion, cantidad, descripcion, productoId) {
        document.getElementById('modalImage').src = 'data:image/png;base64,' + imagen;
        document.getElementById('modalNombre').textContent = nombre;
        document.getElementById('modalPrecio').textContent = precio;
        document.getElementById('modalCategoria').textContent = categoria;
        document.getElementById('modalPresentacion').textContent = presentacion;
        document.getElementById('modalCantidad').textContent = cantidad;
        document.getElementById('modalDescripcion').textContent = descripcion;

        document.getElementById('addToCartButton').setAttribute('data-product-id', productoId);

        var productModal = new bootstrap.Modal(document.getElementById('productModal'));
        productModal.show();
    }
    async function agregarAlCarrito() {
        const productoId = document.getElementById('addToCartButton').getAttribute('data-product-id');
        const cantidad = 1; 
        const personaId = '@idUsuario'; 

        const carritoId = await obtenerCarritoActivo(personaId);

        if (!carritoId) {
            const nuevoCarritoId = await crearCarrito(personaId);
            if (!nuevoCarritoId) {
                
                Swal.fire('Error', 'No se pudo verificar el carrito. Intenta nuevamente.', 'error');
                return;
            }
            carritoId = nuevoCarritoId;
        }

        const requestBody = {
            detalleID: '3fa85f64-5717-4562-b3fc-2c963f66afa6', 
            carritoID: carritoId,
            productoID: productoId,
            cantidad: cantidad,
            precioUnitario: 0.01  
        };

        const url = `https://localhost:7184/api/Carrito/${carritoId}/agregar?personaId=${personaId}`;

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'  
                },
                body: JSON.stringify(requestBody)  
            });

            if (response.ok) {
                const Toast = Swal.mixin({
                    toast: true,
                    position: "top-end",
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.onmouseenter = Swal.stopTimer;
                        toast.onmouseleave = Swal.resumeTimer;
                    }
                });
                Toast.fire({
                    icon: "success",
                    title: "Producto agregado al carrito exitosamente"
                });
            } else {
                const errorData = await response.json();
                console.error('Error al agregar producto al carrito:', errorData.message);
                const Toast = Swal.mixin({
                    toast: true,
                    position: "top-end",
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.onmouseenter = Swal.stopTimer;
                        toast.onmouseleave = Swal.resumeTimer;
                    }
                });
                Toast.fire({
                    icon: "error",
                    title: "Error al agregar producto al carrito"
                });
            }
        } catch (error) {
            console.error('Error en la solicitud:', error);
            const Toast = Swal.mixin({
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.onmouseenter = Swal.stopTimer;
                    toast.onmouseleave = Swal.resumeTimer;
                }
            });
            Toast.fire({
                icon: "error",
                title: "No se pudo conectar al servidor"
            });
        }
    }

    async function obtenerCarritoActivo(personaId) {
        const url = `https://localhost:7184/api/Carrito/activo/${personaId}`; 

        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                return data.carritoId; 
            } else {
                return null;
            }
        } catch (error) {
            console.error('Error al obtener carrito activo:', error);
            return null;
        }
    }

    async function crearCarrito(personaId) {
        const url = `https://localhost:7184/api/Carrito/crear/${personaId}`;

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'  
                },
             
            });

            if (response.ok) {
                const data = await response.json();
                return data.carritoId;
            } else {
                console.error('Error al crear el carrito');
                return null;
            }
        } catch (error) {
            console.error('Error en la solicitud de creación del carrito:', error);
            return null;
        }
    }



</script>

@page
@model WEB.Pages.Productos.IndexModel
@{
}
@{
    Guid idUsuario = Guid.Empty;
    if (User.Identity.IsAuthenticated)
    {
        idUsuario = Abstracciones.Modelos.Autenticacion.ClaimsPrincipalExtensions.GetIdUsuario(User);
    }
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

<section class="mt-5">
    <div class="container">
        <div class="cart-icon-container position-fixed top-0 end-0 m-3">
            <a href="javascript:void(0);"
               class="btn btn-outline-secondary position-relative"
               onclick="abrirModalCarrito()">
                <i class="fa fa-shopping-cart" style="font-size: 1.5rem;"></i>
                <span id="cartItemCount"
                      class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                    0
                </span>
            </a>
        </div>

        <h2 class="text-center mb-4">Nuestros Productos</h2>
        <div class="row mb-4">
            <div class="col-md-12">
                <form class="d-flex" role="search" method="get">
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" name="searchTerm" placeholder="Buscar productos" aria-label="Buscar productos" aria-describedby="button-addon2" value="@Request.Query["searchTerm"]">
                        <button class="btn btn-primary me-2" type="submit" id="button-addon2">Buscar</button>
                        <a href="/Productos/Index" class="btn btn-secondary">Limpiar</a>
                    </div>
                </form>
            </div>
        </div>
        <div class="row">
            @if (Model.producto != null)
            {
                @foreach (var producto in Model.producto)
                {
                    <div class="col-md-3 mb-4">
                        <div class="card shadow-sm h-100 d-flex flex-column">
                            <img src="data:image/png;base64,@producto.ImagenConvertida" class="card-img-top" alt="@producto.Nombre">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@Html.DisplayFor(modelItem => producto.Nombre)</h5>
                                <p class="card-text"><strong>Precio: </strong>@Html.DisplayFor(modelItem => producto.Precio)</p>
                                <p class="card-text"><strong>SKU: </strong>@Html.DisplayFor(modelItem => producto.ProductoID)</p>
                                <div class="d-grid gap-2 mt-auto">
                                    <button class="btn btn-primary" onclick="openProductModal('@producto.ImagenConvertida', '@producto.Nombre', '@producto.Precio', '@producto.Categoria', '@producto.Presentacion', '@producto.Cantidad', '@producto.Descripcion', '@producto.ProductoID')">
                                        Ver detalles
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-danger" role="alert">
                    No hay productos para mostrar.
                </div>
            }

            <div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="productModalLabel">Detalles del producto</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <img id="modalImage" class="img-fluid mb-3" alt="Imagen del producto">
                            <h5 style="text-align: center;" id="modalNombre"></h5>
                            <p><strong>Precio: </strong><span id="modalPrecio"></span></p>
                            <p><strong>Categoría: </strong><span id="modalCategoria"></span></p>
                            <p><strong>Presentación: </strong><span id="modalPresentacion"></span></p>
                            <p><strong>Cantidad disponible: </strong><span id="modalCantidad"></span></p>
                            <p><strong>Descripción: </strong><span id="modalDescripcion"></span></p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                            <button class="btn btn-primary" id="addToCartButton" onclick="agregarAlCarrito()">Agregar al carrito</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<style>
    .cart-icon-container {
        z-index: 1; 
    }
</style>
<div><a href="../Index" class="btn btn-secondary w-100" style="margin-top:10px">Volver</a></div>
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Notificación</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            Mensaje de confirmación
        </div>
    </div>
</div>
<div class="modal fade" id="cartModal" tabindex="-1" aria-labelledby="cartModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cartModalLabel">Detalles del Carrito</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="cartItemsContainer">
                </div>
                <hr>
                <p class="text-end"><strong>Subtotal:</strong> ₡<span id="cartTotal">0</span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <a href="/Carrito/Finalizar" class="btn btn-primary">Finalizar Compra</a>
            </div>
        </div>
    </div>
</div>

<script>
    async function abrirModalCarrito() {
        const personaId = '@idUsuario';
        const urlDetalles = `https://localhost:7184/api/Carrito/${personaId}/detalles`;

        try {
            const response = await fetch(urlDetalles);
            if (response.ok) {
                const detalles = await response.json();
                mostrarDetallesCarrito(detalles);
            } 
        } catch (error) {
            console.error('Error en la solicitud:', error);
            Swal.fire('Error', 'No se pudo conectar al servidor.', 'error');
        }

        const cartModal = bootstrap.Modal.getInstance(document.getElementById('cartModal'));
        if (cartModal) {
            cartModal.hide();
        }
        const newCartModal = new bootstrap.Modal(document.getElementById('cartModal'));
        newCartModal.show();
    }

    async function mostrarDetallesCarrito(detalles) {
        const cartItemsContainer = document.getElementById('cartItemsContainer');
        cartItemsContainer.innerHTML = ''; 
        let total = 0;

        if (detalles.length === 0) {
            cartItemsContainer.innerHTML = '<p>El carrito está vacío.</p>';
        } else {
            for (const detalle of detalles) {
                const productoNombre = await obtenerNombreProducto(detalle.productoID);
                total += detalle.montoTotal;

                const productoHtml = `
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <div>
                                <p class="mb-0"><strong>Producto:</strong> ${productoNombre}</p>
                                <p class="mb-0"><strong>Cantidad:</strong> ${detalle.cantidad}</p>
                                <p class="mb-0"><strong>Precio Unitario:</strong> ₡${detalle.precioUnitario}</p>
                            </div>
                            <div>
                                <button class="btn btn-danger btn-sm" onclick="eliminarProducto('${detalle.carritoID}', '${detalle.productoID}', ${detalles.length})">
                                    Eliminar
                                </button>
                                <button class="btn btn-primary btn-sm" onclick="abrirModalActualizarCantidad('${detalle.carritoID}', '${detalle.productoID}', ${detalle.cantidad})">
                                    Editar cantidad
                                </button>
                            </div>
                        </div>
                    `;
                cartItemsContainer.innerHTML += productoHtml;
            }
        }

        document.getElementById('cartTotal').textContent = total.toFixed(2);
    }

    async function obtenerNombreProducto(productoID) {
        const urlProducto = `https://localhost:7184/api/Producto?ProductoID=${productoID}`;
        try {
            const response = await fetch(urlProducto);
            if (response.ok) {
                const producto = await response.json();
                return producto.nombre;
            } else {
                console.error(`Error al obtener el nombre del producto con ID: ${productoID}`);
                return 'Nombre no disponible';
            }
        } catch (error) {
            console.error('Error en la solicitud:', error);
            return 'Nombre no disponible';
        }
    }

    async function eliminarProducto(carritoID, productoID, totalProductos) {
        const urlEliminar = `https://localhost:7184/api/Carrito/${carritoID}/producto/${productoID}`;
        try {
            const response = await fetch(urlEliminar, { method: 'DELETE' });
            if (response.ok) {
                Swal.fire('Eliminado', 'Producto eliminado del carrito.', 'success');

                if (totalProductos === 1) {
                    const cartModal = bootstrap.Modal.getInstance(document.getElementById('cartModal'));

                    cartModal.hide();
                    
                } else {
                    abrirModalCarrito();
                }
            } else {
                console.error('Error al eliminar el producto del carrito');
                Swal.fire('Error', 'No se pudo eliminar el producto.', 'error');
            }
        } catch (error) {
            console.error('Error en la solicitud:', error);
            Swal.fire('Error', 'No se pudo conectar al servidor.', 'error');
        }
    }

    function abrirModalActualizarCantidad(carritoID, productoID, cantidadActual) {
        Swal.fire({
            title: 'Actualizar cantidad',
            input: 'number',
            inputLabel: `Cantidad actual: ${cantidadActual}`,
            inputValue: cantidadActual,
            inputAttributes: {
                min: 1
            },
            showCancelButton: true,
            confirmButtonText: 'Actualizar',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                const nuevaCantidad = parseInt(result.value, 10);
                if (nuevaCantidad > 0) {
                    actualizarCantidadProducto(carritoID, productoID, nuevaCantidad);
                } else {
                    Swal.fire('Error', 'La cantidad debe ser mayor que cero.', 'error');
                }
            }
        });
    }

    async function actualizarCantidadProducto(carritoID, productoID, nuevaCantidad) {
        const urlActualizar = `https://localhost:7184/api/Carrito/${carritoID}/producto/${productoID}/actualizar`;
        try {
            const response = await fetch(urlActualizar, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(nuevaCantidad)
            });

            if (response.ok) {
                Swal.fire('Actualizado', 'Cantidad actualizada correctamente.', 'success');
                abrirModalCarrito();
            } else {
                console.error('Error al actualizar la cantidad del producto');
                Swal.fire('Error', 'No se pudo actualizar la cantidad.', 'error');
            }
        } catch (error) {
            console.error('Error en la solicitud:', error);
            Swal.fire('Error', 'No se pudo conectar al servidor.', 'error');
        }
    }

</script>




<script>
    document.addEventListener('DOMContentLoaded', async () => {
        const personaId = '@idUsuario';
        let carritoId = await obtenerCarritoActivo(personaId);

        if (carritoId) {
            await actualizarCantidadDesdeCarrito(personaId);
        } else {
            actualizarCantidadCarrito(0);
        }
    });

    function openProductModal(imagen, nombre, precio, categoria, presentacion, cantidad, descripcion, productoId) {
        document.getElementById('modalImage').src = 'data:image/png;base64,' + imagen;
        document.getElementById('modalNombre').textContent = nombre;
        document.getElementById('modalPrecio').textContent = precio;
        document.getElementById('modalCategoria').textContent = categoria;
        document.getElementById('modalPresentacion').textContent = presentacion;
        document.getElementById('modalCantidad').textContent = cantidad;
        document.getElementById('modalDescripcion').textContent = descripcion;
        document.getElementById('addToCartButton').setAttribute('data-product-id', productoId);

        var productModal = new bootstrap.Modal(document.getElementById('productModal'));
        productModal.show();
    }

    async function agregarAlCarrito() {
        const productoId = document.getElementById('addToCartButton').getAttribute('data-product-id');
        const cantidad = 1;
        const personaId = '@idUsuario';
        let carritoId = await obtenerCarritoActivo(personaId);

        if (!carritoId) {
            carritoId = await crearCarrito(personaId);
            if (!carritoId) {
                Swal.fire('Error', 'No se pudo verificar el carrito. Intenta nuevamente.', 'error');
                return;
            }
        }

        const requestBody = {
            detalleID: '3fa85f64-5717-4562-b3fc-2c963f66afa6',
            carritoID: carritoId,
            productoID: productoId,
            cantidad: cantidad,
            precioUnitario: 0.01
        };

        const url = `https://localhost:7184/api/Carrito/${carritoId}/agregar?personaId=${personaId}`;

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            if (response.ok) {
                await actualizarCantidadDesdeCarrito(personaId);

                Swal.fire({
                    icon: "success",
                    title: "Producto agregado al carrito exitosamente",
                    toast: true,
                    position: "bottom-end",
                    timer: 3000,
                    showConfirmButton: false
                });
            } else {
                console.error('Error al agregar producto al carrito');
                Swal.fire({
                    icon: "error",
                    title: "Error al agregar producto al carrito",
                    toast: true,
                    position: "bottom-end",
                    timer: 3000,
                    showConfirmButton: false
                });
            }
        } catch (error) {
            console.error('Error en la solicitud:', error);
            Swal.fire({
                icon: "error",
                title: "No se pudo conectar al servidor",
                toast: true,
                position: "bottom-end",
                timer: 3000,
                showConfirmButton: false
            });
        }
    }

    async function obtenerCarritoActivo(personaId) {
        const url = `https://localhost:7184/api/Carrito/activo/${personaId}`;

        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                return data.carritoID;
            } else {
                return null;
            }
        } catch (error) {
            console.error('Error al obtener carrito activo:', error);
            return null;
        }
    }

    async function crearCarrito(personaId) {
        const url = `https://localhost:7184/api/Carrito/crear/${personaId}`;

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const data = await response.json();
                return data.carritoId;
            } else {
                console.error('Error al crear el carrito');
                return null;
            }
        } catch (error) {
            console.error('Error en la solicitud de creación del carrito:', error);
            return null;
        }
    }

    async function actualizarCantidadDesdeCarrito(personaId) {
        const urlDetalles = `https://localhost:7184/api/Carrito/${personaId}/detalles`;

        try {
            const response = await fetch(urlDetalles);
            if (response.ok) {
                const detalles = await response.json();
                const totalProductos = detalles.reduce((total, item) => total + item.cantidad, 0);
                actualizarCantidadCarrito(totalProductos);
            } else {
                console.error('Error al obtener los detalles del carrito');
                actualizarCantidadCarrito(0);
            }
        } catch (error) {
            console.error('Error al obtener detalles del carrito:', error);
            actualizarCantidadCarrito(0);
        }
    }

    function actualizarCantidadCarrito(cantidad) {
        const cartItemCount = document.getElementById('cartItemCount');
        cartItemCount.textContent = cantidad;
    }
</script>
